{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/06/30/cicd/","result":{"data":{"content":{"edges":[{"node":{"id":"db45ff01-055b-5cff-ac45-251417ef3cac","html":"<h2 id=\"在线阅读-httpshfxiang93githubioauto-ci-cd\" style=\"position:relative;\"><a href=\"#%E5%9C%A8%E7%BA%BF%E9%98%85%E8%AF%BB-httpshfxiang93githubioauto-ci-cd\" aria-label=\"在线阅读 httpshfxiang93githubioauto ci cd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在线阅读 <a href=\"https://hfxiang93.github.io/auto-CI-CD/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hfxiang93.github.io/auto-CI-CD/</a></h2>\n<p><a name=\"bsFgN\"></a></p>\n<h2 id=\"什么是cicd？\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AFcicd%EF%BC%9F\" aria-label=\"什么是cicd？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是CI/CD？</h2>\n<p>CICD 是 持续集成（Continuous Integration）和持续部署（Continuous Deployment）简称。指在开发过程中自动执行一系列脚本来减低开发引入 bug 的概率，在新代码从开发到部署的过程中，尽量减少人工的介入。\n<a name=\"xCb2P\"></a></p>\n<h4 id=\"持续集成：ci\" style=\"position:relative;\"><a href=\"#%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%9Aci\" aria-label=\"持续集成：ci permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>持续集成：CI</h4>\n<p>持续集成指在和向远程仓库 push 代码后，在这次提交合并入主分支前进行一系列测试，构建等流程。假设现在有个应用的代码存储在 gitlab 上，每天开发者都 push 很多次提交，针对每次 push，你可以创建一系列脚本进行自动测试，降低往应用里引入错误的概率。这就是持续集成，它可应用在包括开发分支在内的多个分支上。\n<a name=\"6aTwr\"></a></p>\n<h4 id=\"持续部署：cd\" style=\"position:relative;\"><a href=\"#%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%EF%BC%9Acd\" aria-label=\"持续部署：cd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>持续部署：CD</h4>\n<p>持续部署在持续集成的基础上更进一步，指将推送指仓库默认分支的部署至产品环境。如果这部分需要手动触发，这就是一个持续交付（Continuous Delivery）环节。<br />Gitlab 内置了 CICD 工具，不需要使用第三方工具，所以我们使用gitlab-ci以及gitlab-runner来完成我们的前端自动化构建部署\n<a name=\"cR5Hh\"></a></p>\n<h2 id=\"实现原理\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\" aria-label=\"实现原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现原理</h2>\n<p>前端发布流程基于gitlab-ci以及gitlab-runner，runner运行环境目前为docker，保证项目之间的开发版本不会有冲突，打包过后的前端包文件，通过<strong>rsync</strong>同步到静态资源文件中，通过监听master（生产环境）dev（开发环境）变动自动执行发布流程。\n<a name=\"8bWms\"></a></p>\n<h2 id=\"流程图\" style=\"position:relative;\"><a href=\"#%E6%B5%81%E7%A8%8B%E5%9B%BE\" aria-label=\"流程图 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>流程图</h2>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcf006e8565a5?w=2468&#x26;h=952&#x26;f=png&#x26;s=21587\">\n<a name=\"neac3\"></a></p>\n<h2 id=\"实现步骤\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\" aria-label=\"实现步骤 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现步骤</h2>\n<p>1.首先用docker+nginx部署项目<br />2.在gitlab新建的项目的CI/CD配置中填写需要发布到服务器的相关信息<br />3.将你所需要发布的项目下新建一个.gitlab-ci.yml文件，让gitlab去执行自动化流程<br />4.打包构建，提交代码，触发钩子执行自动化构建发布</p>\n<p><a name=\"deZBe\"></a></p>\n<h3 id=\"1首先用dockernginx部署项目\" style=\"position:relative;\"><a href=\"#1%E9%A6%96%E5%85%88%E7%94%A8dockernginx%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE\" aria-label=\"1首先用dockernginx部署项目 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.首先用docker+nginx部署项目</h3>\n<p>docker下配置nginx部署vue项目步骤：<br />1.docker pull nginx 下载nginx<br />2.在/data /nginx（这里的/data /nginx就是服务器上前端静态资源的文件夹）路径下创建html，conf，conf.d三个文件夹，html下放npm run build打包后的静态文件<br />3.conf下放nginx.conf,conf.d下放default.conf，nginx.conf和default.conf需要自己配置<br />下面是nginx 模板文件 可以自己根据需要修改<br />nginx default.conf配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-nginx line-numbers\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  localhost</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">#charset koi8-r;</span>\n  <span class=\"token comment\">#access_log  /var/log/nginx/host.access.log  main;</span>\n\n  <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">root</span>   /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">index</span>  index.html index.htm</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>nginx nginx.conf配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-nginx line-numbers\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">user</span>  nginx</span><span class=\"token punctuation\">;</span>\n<span class=\"token directive\"><span class=\"token keyword\">worker_processes</span>  <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token directive\"><span class=\"token keyword\">error_log</span>  /var/log/nginx/error.log warn</span><span class=\"token punctuation\">;</span>\n<span class=\"token directive\"><span class=\"token keyword\">pid</span>        /var/run/nginx.pid</span><span class=\"token punctuation\">;</span>\n<span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span>  <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token directive\"><span class=\"token keyword\">include</span>       /etc/nginx/mime.types</span><span class=\"token punctuation\">;</span>\n  <span class=\"token directive\"><span class=\"token keyword\">default_type</span>  application/octet-stream</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token directive\"><span class=\"token keyword\">log_format</span>  main  <span class=\"token string\">'<span class=\"token variable\">$remote_addr</span> - <span class=\"token variable\">$remote_user</span> [<span class=\"token variable\">$time_local]</span> \"<span class=\"token variable\">$request</span>\" '</span>\n  <span class=\"token string\">'<span class=\"token variable\">$status</span> <span class=\"token variable\">$body_bytes_sent</span> \"<span class=\"token variable\">$http_referer</span>\" '</span>\n  <span class=\"token string\">'\"<span class=\"token variable\">$http_user_agent</span>\" \"<span class=\"token variable\">$http_x_forwarded_for</span>\"'</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token directive\"><span class=\"token keyword\">access_log</span>  /var/log/nginx/access.log  main</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token directive\"><span class=\"token keyword\">sendfile</span>        <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">#tcp_nopush     on;</span>\n\n  <span class=\"token directive\"><span class=\"token keyword\">keepalive_timeout</span>  <span class=\"token number\">65</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip_disable</span> <span class=\"token string\">\"msie6\"</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip_vary</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip_proxied</span> any</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip_comp_level</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip_buffers</span> <span class=\"token number\">16</span> <span class=\"token number\">8k</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip_http_version</span> 1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip_min_length</span> <span class=\"token number\">256</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">gzip_types</span> text/plain text/css\n                   application/json application/x-javascript text/xml\n                   application/xml application/xml+rss text/javascript application/javascript\n                   application/vnd.ms-fontobject application/x-font-ttf font/opentype \t\t\t\t    image/svg+xml image/x-icon\n                   image/jpeg image/gif image/png</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token directive\"><span class=\"token keyword\">include</span> /etc/nginx/conf.d/*.conf</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>4.所有文件创建好之后，执行</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">docker run --name *容器名称*\n-p <span class=\"token number\">8088</span>:80 -v /data/nginx/html:/usr/share/nginx/html -v\n/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v\n/data/nginx/log:/var/log/nginx -d nginx:1.13（镜像名称）</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>常用docker指令操作：<br />--name命名容器，<br />-p映射端口比如8088:80，<br />-v映射当前文件夹到镜像中的文件夹, <br />-d后台运行容器，<br />docker ps -a 查看容器，<br />docker\nimages -a 查看所有镜像，<br />docker rm 容器id\n删除容器，<br />docker rmi 镜像id 删除镜像， <br />docker start 容器id 运行容器，<br />docker stop 容器id 停止容器</p>\n<p><strong>到这一步，就先完成了docker+nginx部署前端项目了，接下来是配置自动化构建发布</strong>\n<a name=\"MtymO\"></a></p>\n<h3 id=\"2在gitlab新建的项目的cicd配置中填写需要发布到服务器的相关信息\" style=\"position:relative;\"><a href=\"#2%E5%9C%A8gitlab%E6%96%B0%E5%BB%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%9A%84cicd%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%A1%AB%E5%86%99%E9%9C%80%E8%A6%81%E5%8F%91%E5%B8%83%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF\" aria-label=\"2在gitlab新建的项目的cicd配置中填写需要发布到服务器的相关信息 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.在gitlab新建的项目的CI/CD配置中填写需要发布到服务器的相关信息</h3>\n<p><a name=\"pQcaI\"></a></p>\n<h4 id=\"21gitlab上项目中cicd中的variables变量配置（用在yml里的，防止代码中泄露服务器信息）\" style=\"position:relative;\"><a href=\"#21gitlab%E4%B8%8A%E9%A1%B9%E7%9B%AE%E4%B8%ADcicd%E4%B8%AD%E7%9A%84variables%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%EF%BC%88%E7%94%A8%E5%9C%A8yml%E9%87%8C%E7%9A%84%EF%BC%8C%E9%98%B2%E6%AD%A2%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%B3%84%E9%9C%B2%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF%EF%BC%89\" aria-label=\"21gitlab上项目中cicd中的variables变量配置（用在yml里的，防止代码中泄露服务器信息） permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1Gitlab上项目中CI/CD中的variables变量配置（用在.yml里的，防止代码中泄露服务器信息）</h4>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcfea555c7278?w=1832&#x26;h=900&#x26;f=png&#x26;s=434546\">\n<a name=\"Izzqr\"></a></p>\n<h4 id=\"22接下来在服务器上操作，配置免密登录\" style=\"position:relative;\"><a href=\"#22%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%93%8D%E4%BD%9C%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95\" aria-label=\"22接下来在服务器上操作，配置免密登录 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2接下来在服务器上操作，配置免密登录</h4>\n<p>生产密钥对: ssh-keygen -t rsa，配置让gitlab服务器和前端代码服务器之间可以免密登录具体免密登录操作如下：<br />登录服务器，cd .ssh 执行 ssh-keygen -t rsa命令，会生成id<em>rsa（秘钥）和id</em>rsa.pub（公钥）两个文件</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> .ssh\nssh-keygen -t rsa</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcf0070a64b74?w=554&#x26;h=370&#x26;f=png&#x26;s=124238\" alt=\"image.png\"></p>\n<p>将公钥id<em>rsa.pub中的内容copy到authorized</em>keys中（做免密登录）\n<a name=\"6IkO0\"></a></p>\n<h4 id=\"23服务器上用docker安装gitlab-runner\" style=\"position:relative;\"><a href=\"#23%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%94%A8docker%E5%AE%89%E8%A3%85gitlab-runner\" aria-label=\"23服务器上用docker安装gitlab runner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3服务器上用docker安装gitlab-runner</h4>\n<p>用docker安装gitlab-runner:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">docker pull gitlab/gitlab-runner:latest</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>停止并删除现有容器：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">docker stop gitlab-runner <span class=\"token operator\">&amp;&amp;</span> docker <span class=\"token function\">rm</span> gitlab-runner</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>创建启动容器：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">docker run -d --name gitlab-runner --restart always <span class=\"token punctuation\">\\</span> -v /var/run/docker.sock:/var/run/docker.sock <span class=\"token punctuation\">\\</span> -v /srv/gitlab-runner/config:/etc/gitlab-runner <span class=\"token punctuation\">\\</span> gitlab/gitlab-runner:latest</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>查看日志：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">docker logs gitlab-runner</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><a name=\"XML1M\"></a></p>\n<h4 id=\"24服务器上用docker注册gitlab-runner\" style=\"position:relative;\"><a href=\"#24%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%94%A8docker%E6%B3%A8%E5%86%8Cgitlab-runner\" aria-label=\"24服务器上用docker注册gitlab runner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4服务器上用docker注册gitlab-runner</h4>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcfbf827653ce?w=1542&#x26;h=933&#x26;f=png&#x26;s=307033\">\ndocker注册runner</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">docker run --rm -t -i -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>接下来会提示你进行一系列的操作<br />1.Please enter the gitlab-ci coordinator URL (e.g.\n<a href=\"https://gitlab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gitlab.com</a> ) <a href=\"https://gitlab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gitlab.com</a> <br />输入您的GitLab实例URL：（gitlab中的CI/CD中的runner里面有）<br />2.Please enter the\ngitlab-ci token for this runner xxx<br />输入您获得的令牌来注册token：（gitlab中的CI/CD中的runner里面有）<br />3.Please enter the\ngitlab-ci description for this runner [hostname] my-runner <br />输入Runner的描述，稍后可以在GitLab的UI中进行更改：<br />4.Please enter the\ngitlab-ci tags for this runner (comma separated): my-tag,another-tag <br />输入与Runner有关的标签，稍后可以在GitLab的UI中进行更改：<br />5.Please enter the\nexecutor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker,\nparallels, virtualbox, docker-ssh, shell: docker <br />6.输入Runner执行者：<br />Please enter the\nDocker image (eg. ruby:2.1): alpine:latest <br />如果您选择Docker作为执行程序，则会要求您为未在以下项目中定义一个的项目使用默认映像：这里就输入alpine:latest就行了</p>\n<p><strong>到这一步服务器上就配置完成了</strong><br /><strong>想要看自己的gitlab-runner启动没有，可以输入docker ps -a查看</strong><br /><strong><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcf0074db76d0?w=1883&#x26;h=270&#x26;f=png&#x26;s=69132\" alt=\"image.png\"></strong>\n<a name=\"piux8\"></a></p>\n<h3 id=\"3将你所需要发布的项目下新建一个gitlab-ciyml文件，让gitlab去执行自动化流程\" style=\"position:relative;\"><a href=\"#3%E5%B0%86%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E5%8F%91%E5%B8%83%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8B%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAgitlab-ciyml%E6%96%87%E4%BB%B6%EF%BC%8C%E8%AE%A9gitlab%E5%8E%BB%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%81%E7%A8%8B\" aria-label=\"3将你所需要发布的项目下新建一个gitlab ciyml文件，让gitlab去执行自动化流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.将你所需要发布的项目下新建一个.gitlab-ci.yml文件，让gitlab去执行自动化流程</h3>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcf007679f2ad?w=688&#x26;h=981&#x26;f=png&#x26;s=579260\">\n<a name=\"emfTn\"></a></p>\n<h4 id=\"31gitlab-ciyml文件：\" style=\"position:relative;\"><a href=\"#31gitlab-ciyml%E6%96%87%E4%BB%B6%EF%BC%9A\" aria-label=\"31gitlab ciyml文件： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1gitlab-ci.yml文件：</h4>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\">//做缓存的\n<span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>CI_PROJECT_NAME<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> node_modules/\n//测试\n<span class=\"token comment\"># test_e2e:</span>\n<span class=\"token comment\">#   image: cypress/browsers:chrome67</span>\n<span class=\"token comment\">#   stage: test</span>\n<span class=\"token comment\">#   script:</span>\n<span class=\"token comment\">#     - npm i</span>\n<span class=\"token comment\">#     - npm run test:e2e -- --headless --record --key b2a22185-8eeb-4f0e-9b21-2d61f769d8c7</span>\n<span class=\"token comment\">#   only:</span>\n<span class=\"token comment\">#     - master</span>\n//dev环境构建\n<span class=\"token key atrule\">dev:build</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn\n    <span class=\"token punctuation\">-</span> yarn build<span class=\"token punctuation\">:</span>dev\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> dev\n  <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> eye<span class=\"token punctuation\">-</span>runner\n  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">expire_in</span><span class=\"token punctuation\">:</span> 1 week\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> dist //项目打包后的文件夹\n//dev环境发布\n<span class=\"token key atrule\">dev:deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> alpine<span class=\"token punctuation\">:</span><span class=\"token number\">3.7</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> echo \"http<span class=\"token punctuation\">:</span>//mirrors.aliyun.com/alpine/v3.7/main/\" <span class=\"token punctuation\">></span> /etc/apk/repositories\n    <span class=\"token punctuation\">-</span> apk add <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>no<span class=\"token punctuation\">-</span>cache rsync openssh\n    <span class=\"token punctuation\">-</span> mkdir <span class=\"token punctuation\">-</span>p ~/.ssh\n    <span class=\"token punctuation\">-</span> echo \"$SSH_KEY_DEMO_PRIVATE\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> ~/.ssh/id_rsa\n    <span class=\"token punctuation\">-</span> echo \"$SSH_KEY_DEMO_PUB\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> ~/.ssh/id_rsa.pub\n    <span class=\"token punctuation\">-</span> chmod 600 ~/.ssh/id_rsa\n    <span class=\"token punctuation\">-</span> chmod 600 ~/.ssh/id_rsa.pub\n    <span class=\"token punctuation\">-</span> echo <span class=\"token punctuation\">-</span>e \"Host <span class=\"token important\">*\\n\\t</span> StrictHostKeyChecking no \\n\\n\" <span class=\"token punctuation\">></span> ~/.ssh/config\n    <span class=\"token punctuation\">-</span> rsync <span class=\"token punctuation\">-</span>rav <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>delete ./dist/ \"$SERVER_DEMO_HOST<span class=\"token punctuation\">:</span>$SERVER_DEMO_PATH\"//同步打包后的文件夹里的内容到nginx指定的静态资源文件夹\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> dev\n  <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> eye<span class=\"token punctuation\">-</span>runner</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上述为dev环境配置，生产环境同理配置即可\n<a name=\"pZV5f\"></a></p>\n<h4 id=\"32变量说明：\" style=\"position:relative;\"><a href=\"#32%E5%8F%98%E9%87%8F%E8%AF%B4%E6%98%8E%EF%BC%9A\" aria-label=\"32变量说明： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2变量说明：</h4>\n<p>SERVER<em>DEMO</em>HOST：目标CICD服务器IP地址<br />SERVER<em>DEMO</em>PATH：服务器上nginx指向的静态资源目录<br />SSH<em>KEY</em>DEMO<em>PRIVATE： 服务器私钥<br />SSH</em>KEY<em>DEMO</em>PUB：服务器公钥\n<a name=\"h29Lx\"></a></p>\n<h4 id=\"33注意：\" style=\"position:relative;\"><a href=\"#33%E6%B3%A8%E6%84%8F%EF%BC%9A\" aria-label=\"33注意： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3注意：</h4>\n<p>在webpack项目中配置导出的文件名为你需要同步的文件夹的名称，并且访问路径按需为相对路径，或者绝对路径，具体看项目需求。上面的./dist/就是我们项目中的打包后生成的文件夹</p>\n<p><strong>到此我们就配置完成了，提交代码到指定分支，触发CI/CD</strong>\n<a name=\"0TX8V\"></a></p>\n<h3 id=\"4打包构建，提交代码，触发钩子执行自动化构建发布\" style=\"position:relative;\"><a href=\"#4%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%EF%BC%8C%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%A7%A6%E5%8F%91%E9%92%A9%E5%AD%90%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%8F%91%E5%B8%83\" aria-label=\"4打包构建，提交代码，触发钩子执行自动化构建发布 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.打包构建，提交代码，触发钩子执行自动化构建发布</h3>\n<p><a name=\"yNEKm\"></a></p>\n<h4 id=\"提交代码触发cicd流程\" style=\"position:relative;\"><a href=\"#%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E8%A7%A6%E5%8F%91cicd%E6%B5%81%E7%A8%8B\" aria-label=\"提交代码触发cicd流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>提交代码触发CI/CD流程</h4>\n<p>然后在gitlab项目中的CI/CD流水线中能看到自己的刚刚触发的CI/CD任务，如下图所示\n<a name=\"hFErI\"></a></p>\n<h3 id=\"imagepng\" style=\"position:relative;\"><a href=\"#imagepng\" aria-label=\"imagepng permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcf009e19906e?w=1730&#x26;h=744&#x26;f=png&#x26;s=183771\" alt=\"image.png\"></h3>\n<p>点击状态或者阶段都可以进入构建发布详情页面查看内容<br /><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcf00bc62d806?w=1107&#x26;h=534&#x26;f=png&#x26;s=55259\" alt=\"image.png\"></p>\n<p><a name=\"W2JG1\"></a></p>\n<h4 id=\"构建：build\" style=\"position:relative;\"><a href=\"#%E6%9E%84%E5%BB%BA%EF%BC%9Abuild\" aria-label=\"构建：build permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>构建：build</h4>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcf00c633a522?w=1906&#x26;h=916&#x26;f=png&#x26;s=201898\" alt=\"image.png\"></p>\n<p><a name=\"dA4a3\"></a></p>\n<h4 id=\"发布：deploy\" style=\"position:relative;\"><a href=\"#%E5%8F%91%E5%B8%83%EF%BC%9Adeploy\" aria-label=\"发布：deploy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>发布：deploy</h4>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/19/16fbcf00d45c09e8?w=1914&#x26;h=912&#x26;f=png&#x26;s=169039\" alt=\"image.png\"></p>\n<p>至此，大功告成，妈妈再也不用担心我发布线上代码耗费时间和出错了</p>\n<p><a name=\"1MODL\"></a></p>\n<h2 id=\"自动化构建发布（cicd）的优势\" style=\"position:relative;\"><a href=\"#%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%8F%91%E5%B8%83%EF%BC%88cicd%EF%BC%89%E7%9A%84%E4%BC%98%E5%8A%BF\" aria-label=\"自动化构建发布（cicd）的优势 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自动化构建发布（CI/CD）的优势</h2>\n<p>项目建立仅需配置一次，即可实现自动化部署，docker环境与宿主环境不会发生环境上的冲突，gitlab控制权限，发布过程更为安全，添加自动化测试，项目上线更为省心。</p>\n<p><a name=\"isv0H\"></a></p>\n<h2 id=\"写在最后\" style=\"position:relative;\"><a href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\" aria-label=\"写在最后 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写在最后</h2>\n<p>之前部署前端服务，修改完某个东西之后都要手动打包上传部署，很难受，而且容易出错，自从尝试了自动化部署之后就深深的爱上了，CI/CD是真香，用了都说好。<br />自己也是爬坑怕了很久，总结出来的这一套，希望能给大家带来一些帮助，文档中有啥地方写的不对的地方，欢迎指正，谢谢~</p>","excerpt":"在线阅读 https://hfxiang93.github.io/auto-CI-CD/  什么是CI/CD？ CICD 是 持续集成（Continuous Integration）和持续部署（Continuous Deployment…","fields":{"slug":"/2021/06/30/cicd/"},"frontmatter":{"id":"cicd","title":"前端CICD","slug":"/2021/06/30/cicd/","date":"2021-06-30T03:48:03.125Z","headerImage":"https://i.imgur.com/0zJeQoG.jpeg"}},"previous":null,"next":null}]}},"pageContext":{"id":"db45ff01-055b-5cff-ac45-251417ef3cac","index":0}},"staticQueryHashes":["3705334695"]}